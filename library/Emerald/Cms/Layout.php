<?php
/**
 * Layout object
 *
 * @author pekkis
 * @package Emerald_Cms_Layout
 *
 */
abstract class Emerald_Cms_Layout
{
    /**
     * Page context
     * @var EmCore_Model_PageItem
     */
    private $_page;

    /**
     * Action context
     * @var Emerald_Cms_Controller_Action
     */
    private $_action;

    /**
     * Action stack
     * @var Zend_Controller_Plugin_ActionStack
     */
    private $_actionStack;

    /**
     * Layout file
     * @var string
     */
    private $_layoutFile = 'default';

    /**
     * Running ajax or not
     * @var boolean
     */
    private $_ajax = false;

    /**
     * Human readable description to be used instead of class identifier
     * @var string
     */
    private $_description;


    public function __construct()
    {
        $this->_init();
    }


    /**
     * Init callback
     */
    protected function _init()
    {}

    /**
     * Concrete implementation of layout run
     */
    abstract protected function _run();


    /**
     * Default concrete implementation of ajax layout run is now the same as non-ajax
     */
    protected function _runAjax()
    {
        return $this->_run();
    }


    /**
     * Emerald does it's magic before layout run
     */
    final protected function _preRun()
    {
        // Set layout
        $this->_action->getHelper('layout')->setLayout($this->getLayoutFile());

        // Configure action stack
        $this->_actionStack = $this->_action->getHelper('actionStack');

        $front = Zend_Controller_Front::getInstance();
        $front->getPlugin('Zend_Controller_Plugin_ActionStack')->setClearRequestParams(true);

        // Set view variable to recognize active layout in layout scripts
        $this->_action->view->emerald_layout = $this->getIdentifier();

        // If page and no context, set title.
        if(($page = $this->getPage()) && !$this->isAjax()) {
            $this->_action->view->headTitle($page->getLocaleItem()->getOption('title'));
            $this->_action->view->headTitle($page->title, 'PREPEND');
        }

    }

    /**
     * Run without context
     */
    public function run()
    {
        $this->_ajax = false;
        $this->_preRun();
        $this->_run();
    }

    /**
     * Run within ajax context
     */
    public function runAjax()
    {
        $this->_action->getHelper('layout')->disableLayout();
        $this->_ajax = true;
        $this->_preRun();
        $this->_runAjax();
    }

    /**
     * Returns whether we're in ajax context
     * 
     * @return boolean
     */
    public function isAjax()
    {
        return $this->_ajax;
    }

    /**
     * Sets action context's noRender parameter.
     * 
     * @param boolean $noRender
     */
    public function setNoRender($noRender = true)
    {
        $this->_action->getHelper('viewRenderer')->setNoRender($noRender);
    }



    /**
     * Sets layout file
     * 
     * @param string $layoutFile
     */
    public function setLayoutFile($layoutFile)
    {
        $this->_layoutFile = $layoutFile;
    }


    /**
     * Returns layout file
     * 
     * @return string
     */
    public function getLayoutFile()
    {
        return $this->_layoutFile;
    }


    /**
     * Sets action context
     * 
     * @param Emerald_Cms_Controller_Action $action
     */
    public function setAction(Emerald_Cms_Controller_Action $action)
    {
        $this->_action = $action;
    }


    /**
     * Returns action context
     * 
     * @return Emerald_Cms_Controller_Action
     */
    public function getAction()
    {
        return $this->_action;
    }



    /**
     * Sets page context
     * 
     * @param EmCore_Model_PageItem $page
     */
    public function setPage(EmCore_Model_PageItem $page)
    {
        $this->_page = $page;
    }


    /**
     * Returns page context
     * 
     * @return EmCore_Model_PageItem
     */
    public function getPage()
    {
        return $this->_page;
    }


    /**
     * Returns autogenerated identifier for layout
     * 
     * @return string
     */
    public function getIdentifier()
    {
        $split = explode("_", get_class($this));
        return array_pop($split);

    }



    /**
     * Sets human readable description of layout
     * 
     * @param string $description
     */
    public function setDescription($description)
    {
        $this->_description = $description;
    }



    /**
     * Returns human readable description, and autogenerated if not available.
     * 
     * @return string
     */
    public function getDescription()
    {
        return ($this->_description) ? $this->_description : $this->getIdentifier();
    }


    /**
     * Pushes an action to the stack
     * 
     * @param string $action Action
     * @param string $controller Controller
     * @param string $module Module
     * @param array $params Params
     */
    public function actionToStack($action, $controller = null, $module = null, array $params = array())
    {
        $this->_actionStack->actionToStack($action, $controller, $module, $params);
    }


    /**
     * Pushes a shard action to the stack
     * 
     * @param mixed $page Page item or page id
     * @param mixed $shard Shard item or shard identifier
     * @param array $params
     */
    public function shard($page, $shard, array $params = array())
    {
        try {
            	
            if(!$page instanceof EmCore_Model_PageItem) {
                $pageModel = new EmCore_Model_Page();
                $page = $pageModel->find($page);
                if(!$page) {
                    throw new Emerald_Common_Exception('Invalid page');
                }
            }

            // Merge request and internal params. Internal overwrite request.
            $requestParams = Zend_Controller_Front::getInstance()->getRequest()->getParams();
            $params = array_merge($requestParams, $params);

            if(!$shard instanceof EmCore_Model_ShardItem) {
                $shardModel = new EmCore_Model_Shard();
                $shard = $shardModel->findByIdentifier($shard);
                if(!$shard) {
                    throw new Emerald_Common_Exception('Invalid shard');
                }
            }
            	
            // Get and process shard params, push shard action to stack
            $action = $shard->getDefaultAction();
            if(isset($params['a'])) {
                $action['action'] = $params['a'];
            }
            $params['page_id'] = $page->id;
            return $this->actionToStack(
            $action['action'], $action['controller'], $action['module'], $params
            );
            	
        } catch(Exception $e) {
            // In production, return nothing when poop hits the fan
            return (APPLICATION_ENV == 'production') ? '' : $e->getMessage();
        }

    }

}